CPPdta <- CPPdta[c(1:5,8)]
View(CPPdta)
?write_csv
write_csv(CPPdta, "CPPcleandata.csv")
###Match family groups to CPPs
library(tidyverse)
library(readxl)
#read in family group data
FGdta <- read_excel("Family Groups.xlsx")
FGdta[FGdta$X__1 == "Edinburgh City",1] <- "Edinburgh, City of"
##read in CPP data
CPPdta <- read_csv("CPPcleandata.csv")
##match all FGs to CPP data
CPPdta <- left_join(CPPdta, FGdta, by = c("CPP" = "X__1"))
##if the indicator is rurality replace the FG
CPPdta$FG <-with(CPPdta, ifelse(Indicator %in% c("Fragility","Fuel Poverty"), popdensityFG_2012, deprivationFG_2012))
CPPdta <- CPPdta[c(1:5,8)]
write_csv(CPPdta, "CPPcleandata.csv")
runApp()
?map
?tryCatch
runApp()
runApp()
?map
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(function(x) rnorm(10, x))
View(dta)
?seq_along
runApp()
?do.call
runApp()
runApp()
shiny::runApp()
View(CPPdta)
?local
View(CPPdta)
runApp()
runApp()
View(CPPdta)
unique(CPPdta$Year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(CPPdta)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?HTML
runApp()
runApp()
runApp()
runApp()
checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?inludeHTML
?includeHTML
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?include html
?includehtml
?includeHTML
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?icon
?I
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
unique(IGZdta$Indicator)
runApp()
length(1:3)
?length
length(unique(IGZdta[IGZdta$CPP == "Aberdeen City", "InterZone"]))
unique(IGZdta[IGZdta$CPP == "Aberdeen City", "InterZone"])
nrow(unique(IGZdta[IGZdta$CPP == "Aberdeen City", "InterZone"]))
ceiling(nrow(unique(IGZdta[IGZdta$CPP == "Aberdeen City", "InterZone"])),4)
?ceiling
ceiling(nrow(unique(IGZdta[IGZdta$CPP == "Aberdeen City", "InterZone"]))/4)
?local
View(IGZdta)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("gridExtra")
unique(CPPdta$CPP)
grid.arrange
?grid.arrange
library(gridExtra)
?grid.arrange
?grid.arrange
?grid.arrange
?arrangeGrobs
?arrangeGrob
runApp()
runApp()
runApp()
?lapply
runApp()
runApp()
runApp()
runApp()
runApp()
?length
runApp()
runApp()
?geom_lin
?geom_line
?map
?vaplpy
?vapply
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grobTree()
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(grid)
install.packages("gTable")
install.packages("gtable")
library(gtable)
grobTree
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plts[1]
plts[2]
plts
grid.arrange(plts)
arrangeGrob(plts)
arrangeGrob(plts, ncol = 4)
arrangeGrob(plts, ncol = 4, nrow = 4)
arrangeGrob(plts, nrow = 4)
arrangeGrob(plts[[1]], nrow = 4)
grid.arrange(plts[[1]], nrow = 4)
grid.arrange(plts[[2]], nrow = 4)
grid.arrange(plts[[1:2]], nrow = 4)
grid.arrange(plts[[1]], nrow = 4)
?map
runApp()
grid.arrange(plts[[1]], nrow = 4)
grid.arrange(plts[[c(1,2)]], nrow = 4)
grid.arrange(plts[[c(1)]], nrow = 4)
grid.arrange(plts[[c(2)]], nrow = 4)
grid.arrange(plts[[c(3)]], nrow = 4)
plts
grid.arrange(plts[[1]], plts[[2]], nrow = 4)
grid.arrange(plts[[1]], plts[[2]], plt[[3]], nrow = 4)
grid.arrange(plts[[1]], plts[[2]], plts[[3]], nrow = 4)
install.packages("cowplot")
library(cowplot)
shiny::runApp()
plot_grid(plts[1])
runApp()
plot_grid(plts[1])
plts
plot_grid(plts[[1]])
plot_grid(plts[[1@2]])
plot_grid(plts[[1:2]])
##for loop to generate plots
plts <- list()
runApp()
plot_grid(plts[[1]], plts[[2]])
runApp()
plot_grid(plts[[1]], plts[[2]])
?map
runApp()
runApp()
?do.call
?plot_grid
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
View(IGZdta)
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_color_manual
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c("two" = "red")
c("two" = "red")
runApp()
p <- "something"
c(p = "test")
c(pah = "test")
c(area = "test")
?colourInput
library(shiny)
?colourInput
?as.factor
runApp()
runApp()
View(dta)
View(dta)
View(CPPdta)
runApp()
View(dta)
runApp()
View(dta)
?rbind
runApp()
View(dta)
runApp()
View(dta)
dta$InterZone_Name <- factor(dta$InterZone_Name)
dta$InterZone_Name
levels(dta$InterZone_Name)
?factor
dta$InterZone_Name <- factor(dta$InterZone_Name, levels =unique(dta$InterZone_Name))
levels(dta$InterZone_Name)
runApp()
filter(dta, InterZone_Name %in% c("Scotland", "Aberdeen City"))
runApp()
rm(dta)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(IGZdta)
View(IGZdta)
runApp()
runApp()
runApp()
View(IGZdta)
unique(IGZdta$Type)
runApp()
View(dta)
runApp()
View(dta3)
View(dta2)
View(dta)
runApp()
View(dta)
View(dta)
runApp()
runApp()
View(dta)
runApp()
View(dta)
runApp()
View(dta2)
rm(dta,dta2,dta3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?scale_y_discrete
runApp()
runApp()
runApp()
unique(CPPdta$Year)
unique(CPPdta$Type)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plotOutput
?plotOutput
runApp()
runApp()
runApp()
?plot_grid
runApp()
?uiOutput
dta <- IGZdta[IGZdta$CPP== "Aberdeen City","InterZone_Name"]
length(unique(dta$InterZone_Name))
length(unique(dta$InterZone_Name))/4*20
runApp()
runApp()
?renderPlot
runApp()
warnings()
runApp()
runApp()
runApp()
runApp()
runApp()
?length
length(unique(IGZdta[IGZdta$CPP== "Clackmannanshire","InterZone_Name"]))*4000
length(unique(IGZdta[IGZdta$CPP== "Aberdeen City","InterZone_Name"]))*4000
length(unique(IGZdta[IGZdta$CPP== "Aberdeen City",2]))*4000
length(unique(IGZdta[IGZdta$CPP== "Aberdeen City",2]))
nrow(unique(IGZdta[IGZdta$CPP== "Aberdeen City",2]))*4000
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(IGZChange)
View(IGZ1617)
##For IGZs add Z score column to SpDF
SpPolysIZ@data$rank_decs
?map
?return
?ddply
?transform
?tapply
?ntile
decs <- tapply(IGZ1617$CPPScore, IGZ1617$CPP, ntile, n = 7)
View(decs)
decs
decs <- ddply(IGZ1617, IGZ1617$CPP, ntile, n = 7)
View(IGZ1617)
unique(IGZ1617)
unique(IGZ1617$Indicator)
decs <- ddply(IGZ1617, CPP, mutate, Ranks = ntile(CPPScore , n = 7))
decs <- ddply(IGZ1617, .CPP, mutate, Ranks = ntile(CPPScore , n = 7))
View(IGZChange)
?transform
decs <- ddply(IGZ1617, IGZ1617$CPP, mutate, combCPP = ntile(CPPScore , n = 7))
decs <- ddply(IGZ1617, .(CPP), mutate, combCPP = ntile(CPPScore , n = 7))
View(decs)
decs <- ddply(IGZ1617, .(CPP), mutate, combCPP = sum(CPPScore))
decs$combCPP[[1]]
options(scipen= 10000)
decs$combCPP[[1]]
?sum
decs <- ddply(IGZ1617, .(InterZone), mutate, combCPP = sum(CPPScore)) %>%
ddply(., .(combCPP), mutate, CPPRank = ntile(CPPScore, n = 7))
decs
decs <- ddply(IGZ1617, .(InterZone), mutate, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPRank = ntile(combCPP, n = 7))
?summarise
decs <- ddply(IGZ1617, .(InterZone), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPRank = ntile(combCPP, n = 7))
decs <- ddply(IGZ1617, .(InterZone), summarise, combCPP = sum(CPPScore))
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore))
decs2 <- ddply(IGZ1617, .(InterZone), summarise, combCPP = sum(CPPScore))
View(decs2)
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPRank = ntile(combCPP, n = 7))
View(decs)
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPRank = ntile(combCPP, n = 7)) %>% select(InterZone, CPPRank)
SpPolysIZ@data <- left_join(SpPolysIZ@data, decs, by = "InterZone")
?select
?drop
SpPolysIZ@data <- left_join(SpPolysIZ@data, decs, by = "InterZone") %>% select(-rank_decs)
SpPolysIZ <- read_rds("Files for Maps/IZshapes.rds")
runApp()
?rank
ddply(.,.(CPP), mutate, CPPRank = frank(combCPP)) %>% select(InterZone, CPPRank)
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPDec = ntile(combCPP, n = 7)) %>%
ddply(.,.(CPP), mutate, CPPRank = frank(combCPP)) %>% select(InterZone, CPPRank)
View(decs)
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPDec = ntile(combCPP, n = 7)) %>%
ddply(.,.(CPP), mutate, CPPRank = frank(combCPP)) %>% select(InterZone, CPPDec,CPPRank)
View(decs)
decs <- ddply(IGZ1617, .(InterZone, CPP), summarise, combCPP = sum(CPPScore)) %>%
ddply(., .(CPP), mutate, CPPDec = ntile(combCPP, n = 7)) %>%
ddply(.,.(CPP), mutate, CPPRank = frank(combCPP)) %>% select(InterZone, CPPDec,CPPRank)
SpPolysIZ@data <- left_join(SpPolysIZ@data, decs, by = "InterZone") %>% select(-rank_decs, -rank-min )
SpPolysIZ@data <- left_join(SpPolysIZ@data, decs, by = "InterZone") %>% select(-rank_decs, -`rank-min`)
runApp()
runApp()
shiny::runApp()
install.packages("shinythemes")
install.packages("Unicode")
install.packages("coplot")
install.packages("cowplot")
install.packages("RColorBrewer")
runApp()
install.packages("data.table")
runApp()
shiny::runApp()
